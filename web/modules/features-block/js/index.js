/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _wp = wp,
    blocks = _wp.blocks,
    data = _wp.data,
    element = _wp.element,
    components = _wp.components,
    blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
    select = data.select;
var Fragment = element.Fragment;
var PanelBody = components.PanelBody,
    BaseControl = components.BaseControl,
    Icon = components.Icon,
    RangeControl = components.RangeControl,
    IconButton = components.IconButton,
    Toolbar = components.Toolbar,
    SelectControl = components.SelectControl,
    Button = components.Button,
    Disabled = components.Disabled;
var InnerBlocks = blockEditor.InnerBlocks,
    RichText = blockEditor.RichText,
    InspectorControls = blockEditor.InspectorControls,
    AlignmentToolbar = blockEditor.AlignmentToolbar,
    PanelColorSettings = blockEditor.PanelColorSettings,
    MediaUpload = blockEditor.MediaUpload,
    BlockControls = blockEditor.BlockControls;

var __ = Drupal.t;

var FEATURE_BLOCK = ['features/feature-block'];
var FEATURES_CLASSES = "section gb-features-block";
var MIN_FEATURE_WIDTH = 350;

var settings = {
  title: __('Features'),
  description: __('Features'),
  icon: 'info',
  attributes: {
    align: {
      type: 'string',
      default: 'full'
    },
    maxWidth: {
      type: 'number',
      default: 1400
    },
    columnWidth: {
      type: 'number',
      default: 450
    }
  },

  edit: function edit(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes,
        setAttributes = _ref.setAttributes,
        isSelected = _ref.isSelected;
    var maxWidth = attributes.maxWidth,
        columnWidth = attributes.columnWidth;

    var gridTemplateColumns = 'repeat(auto-fit, minmax(' + (columnWidth > MIN_FEATURE_WIDTH ? columnWidth : MIN_FEATURE_WIDTH) + 'px, 1fr))';
    return React.createElement(
      Fragment,
      null,
      React.createElement(
        'div',
        { className: className },
        React.createElement(
          'section',
          { className: FEATURES_CLASSES, style: { maxWidth: maxWidth, gridTemplateColumns: gridTemplateColumns } },
          React.createElement(InnerBlocks, { template: [FEATURE_BLOCK], templateLock: false, allowedBlocks: FEATURE_BLOCK })
        )
      ),
      React.createElement(
        InspectorControls,
        null,
        React.createElement(
          PanelBody,
          { title: __('Block settings') },
          React.createElement(
            BaseControl,
            { label: __('Section Width in pixels') },
            React.createElement('input', {
              id: 'gb-features-block-input-section-width',
              type: 'number',
              value: maxWidth,
              onChange: function onChange(e) {
                return setAttributes({ maxWidth: parseInt(e.target.value, 10) });
              },
              step: '5'
            })
          ),
          React.createElement(RangeControl, {
            label: __('Featue with in pixels'),
            value: columnWidth,
            onChange: function onChange(value) {
              return setAttributes({ columnWidth: value });
            },
            min: 250, max: 1200, step: 50
          })
        )
      )
    );
  },
  save: function save(_ref2) {
    var className = _ref2.className,
        attributes = _ref2.attributes;
    var maxWidth = attributes.maxWidth,
        columnWidth = attributes.columnWidth;

    var gridTemplateColumns = 'repeat(auto-fit, minmax(' + (columnWidth > MIN_FEATURE_WIDTH ? columnWidth : MIN_FEATURE_WIDTH) + 'px, 1fr))';
    return React.createElement(
      'div',
      { className: className },
      React.createElement(
        'section',
        { className: FEATURES_CLASSES, style: { maxWidth: maxWidth, gridTemplateColumns: gridTemplateColumns } },
        React.createElement(InnerBlocks.Content, null)
      )
    );
  },
  getEditWrapperProps: function getEditWrapperProps(attributes) {
    var align = attributes.align;

    return { 'data-align': align };
  }
};

var category = {
  slug: 'custom',
  title: __('Custom blocks')
};

var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));

registerBlockType(category.slug + '/features-block', _extends({ category: category.slug }, settings));