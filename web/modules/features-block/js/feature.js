/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _wp = wp,
    blocks = _wp.blocks,
    data = _wp.data,
    element = _wp.element,
    components = _wp.components,
    blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
    select = data.select;
var Fragment = element.Fragment;
var PanelBody = components.PanelBody,
    BaseControl = components.BaseControl,
    IconButton = components.IconButton,
    Toolbar = components.Toolbar,
    Button = components.Button;
var RichText = blockEditor.RichText,
    InspectorControls = blockEditor.InspectorControls,
    AlignmentToolbar = blockEditor.AlignmentToolbar,
    PanelColorSettings = blockEditor.PanelColorSettings,
    MediaUpload = blockEditor.MediaUpload,
    BlockControls = blockEditor.BlockControls;

var __ = Drupal.t;

var FEATURE_TEMPLATE = [['core/heading', {
  placeholder: 'Title...',
  content: 'Feature title',
  level: 3
}], ['core/paragraph', {
  placeholder: 'Description...',
  content: "Description"
}]];

var FEATURE_CLASSES = "article gb-feature-block";

var settings = {
  title: __('Feature'),
  description: __('Feature tile'),
  icon: 'info',
  parent: ['custom/features-block'],
  attributes: {
    imageId: {
      type: 'number'
    },
    backgroundImage: {
      type: 'string',
      default: false
    },
    iconShape: {
      type: 'string',
      default: 'diamond'
    }
  },
  edit: function edit(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes,
        setAttributes = _ref.setAttributes;
    var imageId = attributes.imageId,
        backgroundImage = attributes.backgroundImage,
        iconShape = attributes.iconShape;

    var iconClasses = backgroundImage ? 'icon' : 'icon icon--placeholder';
    iconClasses = iconShape != 'none' ? iconClasses + (' icon icon-shape icon-shape--' + iconShape) : iconClasses;
    return React.createElement(
      Fragment,
      null,
      React.createElement(
        'div',
        { className: className },
        React.createElement(
          BlockControls,
          null,
          React.createElement(
            Toolbar,
            null,
            React.createElement(MediaUpload, {
              allowedTypes: ['image'],
              onSelect: function onSelect(media) {
                return setAttributes({ imageId: media.id, backgroundImage: 'url(' + media.url + ')' });
              },
              value: imageId,
              render: function render(_ref2) {
                var open = _ref2.open;
                return React.createElement(IconButton, {
                  className: 'components-toolbar__select-image',
                  label: __('Select icon image'),
                  icon: 'star-filled',
                  onClick: open });
              }
            })
          )
        ),
        React.createElement(
          'article',
          { className: FEATURE_CLASSES },
          React.createElement(
            'div',
            { className: 'column column--left' },
            React.createElement(
              'div',
              { className: 'icon__wrapper' },
              React.createElement('span', { className: iconClasses, style: { backgroundImage: backgroundImage } })
            )
          ),
          React.createElement(
            'div',
            { className: 'column column--right' },
            React.createElement(InnerBlocks, { template: FEATURE_TEMPLATE, templateLock: 'all' })
          )
        )
      ),
      React.createElement(
        InspectorControls,
        null,
        React.createElement(
          PanelBody,
          { title: __('Block settings') },
          React.createElement(SelectControl, { label: __('Icon shape'),
            value: iconShape,
            options: [{
              label: __('Diamond'),
              value: 'diamond'
            }, {
              label: __('Square'),
              value: 'square'
            }, {
              label: __('Circle'),
              value: 'circle'
            }, {
              label: __('None'),
              value: 'none'
            }],
            onChange: function onChange(value) {
              return setAttributes({ iconShape: value });
            }
          })
        )
      )
    );
  },
  save: function save(_ref3) {
    var className = _ref3.className,
        attributes = _ref3.attributes;
    var backgroundImage = attributes.backgroundImage,
        iconShape = attributes.iconShape;

    var iconClasses = backgroundImage ? 'icon' : 'icon icon--placeholder';
    iconClasses = iconShape != 'none' ? iconClasses + (' icon icon-shape icon-shape--' + iconShape) : iconClasses;
    return React.createElement(
      'div',
      { className: className },
      React.createElement(
        'artice',
        { className: FEATURE_CLASSES },
        React.createElement(
          'div',
          { className: 'column column--left' },
          React.createElement(
            'div',
            { className: 'icon__wrapper' },
            React.createElement('span', { className: iconClasses, style: { backgroundImage: backgroundImage } })
          )
        ),
        React.createElement(
          'div',
          { className: 'column column--right' },
          React.createElement(InnerBlocks.Content, null)
        )
      )
    );
  }
};

var category = {
  slug: 'features',
  title: __('Features')
};

var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));

registerBlockType(category.slug + '/feature-block', _extends({ category: category.slug }, settings));