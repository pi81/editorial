/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _wp = wp,
    blocks = _wp.blocks,
    data = _wp.data,
    element = _wp.element,
    components = _wp.components,
    blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
    select = data.select;
var Fragment = element.Fragment;
var PanelBody = components.PanelBody,
    BaseControl = components.BaseControl,
    Icon = components.Icon,
    RangeControl = components.RangeControl,
    IconButton = components.IconButton,
    Toolbar = components.Toolbar,
    SelectControl = components.SelectControl,
    Button = components.Button,
    Disabled = components.Disabled;
var InnerBlocks = blockEditor.InnerBlocks,
    RichText = blockEditor.RichText,
    InspectorControls = blockEditor.InspectorControls,
    AlignmentToolbar = blockEditor.AlignmentToolbar,
    PanelColorSettings = blockEditor.PanelColorSettings,
    MediaUpload = blockEditor.MediaUpload,
    BlockControls = blockEditor.BlockControls;

var __ = Drupal.t;

var TEMPLATE = [['core/heading', {
  placeholder: 'Hero title',
  content: 'My first Gutenberg block for Drupal',
  customTextColor: '#fff',
  level: 2
}], ['core/paragraph', {
  placeholder: 'Hero subtitle',
  customTextColor: '#fff'
}], ['core/button', {
  text: 'Read more',
  url: '#'
}]];

var SECTION_CLASSES = "section gb-hero-block";

var settings = {
  title: __('Gutenberg Hero Block'),
  description: __('Hero section with background'),
  icon: 'welcome-view-site',
  multiple: false,
  attributes: {
    align: {
      type: 'string',
      default: 'full'
    },
    backgroundColor: {
      type: 'string',
      default: '#0071b8'
    },
    backgroundImage: {
      type: 'string'
    },
    backgroundHorizontalPosition: {
      type: 'string',
      default: 'center'
    },
    backgroundVerticalPosition: {
      type: 'string',
      default: 'center'
    },
    backgroundOpacity: {
      type: 'number',
      default: 100
    },
    imageId: {
      type: 'number'
    },
    maxWidth: {
      type: 'number',
      default: 1200
    },
    paddingTop: {
      type: 'number',
      default: 150
    },
    paddingBottom: {
      type: 'number',
      default: 150
    },
    paddingLeft: {
      type: 'number',
      default: 50
    },
    paddingRight: {
      type: 'number',
      default: 50
    }
  },
  edit: function edit(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes,
        setAttributes = _ref.setAttributes,
        isSelected = _ref.isSelected;
    var imageId = attributes.imageId,
        backgroundColor = attributes.backgroundColor,
        backgroundOpacity = attributes.backgroundOpacity,
        backgroundImage = attributes.backgroundImage,
        backgroundHorizontalPosition = attributes.backgroundHorizontalPosition,
        backgroundVerticalPosition = attributes.backgroundVerticalPosition,
        maxWidth = attributes.maxWidth,
        paddingTop = attributes.paddingTop,
        paddingBottom = attributes.paddingBottom,
        paddingLeft = attributes.paddingLeft,
        paddingRight = attributes.paddingRight;

    var opacity = backgroundOpacity / 100;
    var backgroundPosition = backgroundHorizontalPosition + ' ' + backgroundVerticalPosition;

    var backgroundControls = React.createElement(
      Fragment,
      null,
      React.createElement(SelectControl, { label: __('Background Image Vertical Alignment'),
        value: backgroundVerticalPosition,
        options: [{
          label: __('Center'),
          value: 'center'
        }, {
          label: __('Top'),
          value: 'top'
        }, {
          label: __('Bottom'),
          value: 'bottom'
        }],
        onChange: function onChange(value) {
          return setAttributes({ backgroundVerticalPosition: value });
        }
      }),
      React.createElement(SelectControl, { label: __('Background Image Horizontal Alignment'),
        value: backgroundHorizontalPosition,
        options: [{
          label: __('Center'),
          value: 'center'
        }, {
          label: __('Left'),
          value: 'left'
        }, {
          label: __('Right'),
          value: 'right'
        }],
        onChange: function onChange(value) {
          return setAttributes({ backgroundHorizontalPosition: value });
        }
      }),
      React.createElement(RangeControl, { label: __('Background Image Opacity'),
        value: backgroundOpacity,
        onChange: function onChange(value) {
          return setAttributes({ backgroundOpacity: value });
        },
        min: 0,
        max: 100,
        step: 5
      })
    );

    return React.createElement(
      Fragment,
      null,
      React.createElement(
        'div',
        { className: className },
        React.createElement(
          BlockControls,
          null,
          React.createElement(
            Toolbar,
            null,
            backgroundImage ? React.createElement(IconButton, {
              className: 'components-toolbar__remove-image',
              label: __('Remove background image'),
              icon: 'editor-removeformatting',
              onClick: function onClick() {
                return setAttributes({ backgroundImage: false });
              } }) : React.createElement(MediaUpload, {
              allowedTypes: ['image'],
              onSelect: function onSelect(media) {
                return setAttributes({ imageId: media.id, backgroundImage: 'url(' + media.url + ')' });
              },
              value: imageId,
              render: function render(_ref2) {
                var open = _ref2.open;
                return React.createElement(IconButton, {
                  className: 'components-toolbar__select-image',
                  label: __('Select background image'),
                  icon: 'format-image',
                  onClick: open });
              }
            })
          )
        ),
        React.createElement(
          'section',
          { className: SECTION_CLASSES, style: { backgroundColor: backgroundColor, paddingTop: paddingTop, paddingBottom: paddingBottom, paddingLeft: paddingLeft, paddingRight: paddingRight } },
          React.createElement('div', { className: 'gb-hero-block__background', style: { backgroundImage: backgroundImage, backgroundPosition: backgroundPosition, opacity: opacity } }),
          React.createElement(
            'div',
            { className: 'gb-hero-block__content', style: { maxWidth: maxWidth } },
            React.createElement(InnerBlocks, { template: TEMPLATE, templateLock: false })
          )
        )
      ),
      React.createElement(
        InspectorControls,
        null,
        React.createElement(
          PanelBody,
          { title: __('Block settings') },
          backgroundImage ? backgroundControls : React.createElement(
            Disabled,
            { style: { opacity: '.5' } },
            ' ',
            backgroundControls,
            ' '
          ),
          React.createElement(
            BaseControl,
            { label: __('Content Width in pixels') },
            React.createElement('input', {
              id: 'gb-hero-block-input-content-width',
              type: 'number',
              value: maxWidth,
              onChange: function onChange(ev) {
                return setAttributes({ maxWidth: parseInt(ev.target.value, 10) });
              },
              step: '5'
            })
          ),
          React.createElement(
            BaseControl,
            { label: __('Content top spacing') },
            React.createElement('input', {
              id: 'gb-hero-block-input-top-spacing',
              type: 'number',
              value: paddingTop,
              onChange: function onChange(e) {
                return setAttributes({ paddingTop: parseInt(e.target.value, 10) });
              },
              step: '5'
            })
          ),
          React.createElement(
            BaseControl,
            { label: __('Content bottom spacing') },
            React.createElement('input', {
              type: 'number',
              value: paddingBottom,
              onChange: function onChange(e) {
                return setAttributes({ paddingBottom: parseInt(e.target.value, 10) });
              },
              step: '5'
            })
          ),
          React.createElement(
            BaseControl,
            { label: __('Content left spacing') },
            React.createElement('input', {
              type: 'number',
              value: paddingLeft,
              onChange: function onChange(e) {
                return setAttributes({ paddingLeft: parseInt(e.target.value, 10) });
              },
              step: '5'
            })
          ),
          React.createElement(
            BaseControl,
            { label: __('Content right spacing') },
            React.createElement('input', {
              type: 'number',
              value: paddingRight,
              onChange: function onChange(e) {
                return setAttributes({ paddingRight: parseInt(e.target.value, 10) });
              },
              step: '5'
            })
          )
        ),
        React.createElement(PanelColorSettings, { title: __('Color Settings'),
          initialOpen: true,
          colorSettings: [{
            value: backgroundColor,
            onChange: function onChange(value) {
              return setAttributes({ backgroundColor: value });
            },
            label: __('Background Color')
          }] })
      )
    );
  },
  save: function save(_ref3) {
    var className = _ref3.className,
        attributes = _ref3.attributes;
    var backgroundColor = attributes.backgroundColor,
        backgroundImage = attributes.backgroundImage,
        backgroundHorizontalPosition = attributes.backgroundHorizontalPosition,
        backgroundVerticalPosition = attributes.backgroundVerticalPosition,
        backgroundOpacity = attributes.backgroundOpacity,
        maxWidth = attributes.maxWidth,
        paddingTop = attributes.paddingTop,
        paddingBottom = attributes.paddingBottom,
        paddingLeft = attributes.paddingLeft,
        paddingRight = attributes.paddingRight;

    var opacity = backgroundOpacity / 100;
    var backgroundPosition = backgroundHorizontalPosition + ' ' + backgroundVerticalPosition;

    return React.createElement(
      'div',
      { className: className },
      React.createElement(
        'section',
        { className: SECTION_CLASSES, style: { backgroundColor: backgroundColor, paddingTop: paddingTop, paddingBottom: paddingBottom, paddingLeft: paddingLeft, paddingRight: paddingRight } },
        React.createElement('div', { className: 'gb-hero-block__background', style: { backgroundImage: backgroundImage, backgroundPosition: backgroundPosition, opacity: opacity } }),
        React.createElement(
          'div',
          { className: 'gb-hero-block__content', style: { maxWidth: maxWidth } },
          React.createElement(InnerBlocks.Content, null)
        )
      )
    );
  },
  getEditWrapperProps: function getEditWrapperProps(attributes) {
    var align = attributes.align;

    return { 'data-align': align };
  }
};

var category = {
  slug: 'custom',
  title: __('Custom blocks')
};

var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));

registerBlockType(category.slug + '/hero-block', _extends({ category: category.slug }, settings));